services:

  bot:
    container_name: tg-bot
    image: tg-bot:1.0.0
    restart: on-failure
    build:
      context: ./bot_tg
      dockerfile: bot.dockerfile
    environment:
    #   KAFKA_ORDERS_TOPIC_NAME: ${KAFKA_ORDERS_TOPIC_NAME}
    #   KAFKA_HOST: broker
    #   KAFKA_PORT: ${KAFKA_PORT}
    #   API_URL: http://backend:${BACKEND_PORT}
      TOKEN: ${TOKEN}
      API_URL: http://backend:${BACKEND_PORT}
    #   ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    # depends_on:
    #   backend: 
    #     condition: service_started
    #   zookeeper: 
    #     condition: service_started
    #   broker:
    #     condition: service_healthy

  # software:
  #   container_name: software
  #   image: software:1.0.0
  #   restart: on-failure
  #   build:
  #     context: ./software
  #     dockerfile: .dockerfile
  #   environment:
  #     API_URL: http://backend:${BACKEND_PORT}
  #     KAFKA_ORDERS_TOPIC_NAME: ${KAFKA_ORDERS_TOPIC_NAME}
  #     KAFKA_HOST: broker
  #     KAFKA_PORT: ${KAFKA_PORT}
  #     ENCRYPTION_KEY: ${ENCRYPTION_KEY}
  #     API_KEY: ${API_KEY}
  #     INFURA_URL: ${INFURA_URL}
  #     TOKEN_SNIFFER_API: ${TOKEN_SNIFFER_API}
  #   depends_on:
  #     backend: 
  #       condition: service_started
  #     zookeeper: 
  #       condition: service_started
  #     broker:
  #       condition: service_healthy

  backend:
    container_name: backend
    hostname: backend
    image: backend:1.0.0
    restart: on-failure
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    environment:
      
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      DB_HOST: db
      BACKEND_HOST: backend
      BACKEND_PORT: ${BACKEND_PORT}
      # KAFKA_ORDERS_TOPIC_NAME: ${KAFKA_ORDERS_TOPIC_NAME}
      # KAFKA_HOST: broker
      # KAFKA_PORT: ${KAFKA_PORT}
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: db
    image: postgres:14.11-alpine3.19
    restart: on-failure
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./.env:/docker-entrypoint-initdb.d/.env  # Монтируем .env в контейнер ???
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # # Сервис для просмотра БД
  pgadmin:
    image: dpage/pgadmin4:8.9
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_PORT}
    ports:
      - ${PGADMIN_PORT}:${PGADMIN_PORT}
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy 

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:6.2.14
  #   container_name: zookeeper
  #   restart: on-failure
  #   environment:
  #     ZOOKEEPER_SERVER_ID: 1
  #     ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"

  # broker:
  #   image: confluentinc/cp-kafka:6.2.14
  #   container_name: broker
  #   restart: on-failure
  #   ports:
  #     - ${KAFKA_PORT}:${KAFKA_PORT}
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:${KAFKA_PORT},PLAINTEXT_HOST://localhost:19092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # нужно будет выключить и в ручную создавать топики
  #     # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #   healthcheck:
  #     test: ["CMD", "kafka-topics", "--bootstrap-server", "broker:${KAFKA_PORT}", "--list"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 10  

  
  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   restart: on-failure
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     KAFKA_BROKERCONNECT: broker:${KAFKA_PORT}
  #   depends_on:
  #     - broker


volumes:
  pgdata:
  pgadmin: